#!/usr/bin/env ruby

require 'optparse'
require 'tmpdir'
require 'tempfile'
require 'pathname'

require_relative '../lib/bundix'

options = {
  ruby: 'ruby',
  bundle_pack_path: 'vendor/bundle',
  lockfile: 'Gemfile.lock',
  gemset: 'gemset.nix'
}

op = OptionParser.new do |o|
  o.on '-m', '--magic', 'lock, pack, and write dependencies' do
    options[:magic] = true
  end

  o.on "--ruby=#{options.ruby}", 'ruby version to use for magic and init, defaults to latest' do |value|
    options[:ruby] = value
  end

  o.on "--bundle-pack-path=#{options.bundle_pack_path}", "path to pack the magic" do |value|
    options[:bundle_pack_path] = value
  end

  o.on '-i', '--init', "initialize a new shell.nix for nix-shell (won't overwrite old ones)" do
    options[:init] = true
  end

  o.on "--gemset=#{options.gemset}", 'path to the gemset.nix' do |value|
    options[:gemset] = File.expand_path(value)
  end

  o.on "--lockfile=#{options.lockfile}", 'path to the Gemfile.lock' do |value|
    options[:lockfile] = File.expand_path(value)
  end

  o.on '-d', '--dependencies', 'include gem dependencies' do
    options[:deps] = true
  end

  o.on '-q', '--quiet', 'only output errors' do
    options[:quiet] = true
  end

  o.on '-v', '--version', 'show the version of bundix' do
    puts Bundix::VERSION
    exit
  end
end

op.parse!
$VERBOSE = !options[:quiet]

if options[:magic]
  fail unless system(
    Bundix::NIX_SHELL, '-p', options[:ruby],
    "bundler.override { ruby = #{options[:ruby]}; }",
    "--command", "bundle lock --lockfile=#{options[:lockfile]}")
  fail unless system(
    Bundix::NIX_SHELL, '-p', options[:ruby],
    "bundler.override { ruby = #{options[:ruby]}; }",
    "--command", "bundle pack --all --path #{options[:bundle_pack_path]}")
end

if options[:init]
  if File.file?('shell.nix')
    warn "won't override existing shell.nix"
  else
    shell_nix = File.read(File.expand_path('../template/shell.nix', __dir__))
    shell_nix.gsub!('PROJECT', File.basename(Dir.pwd))
    shell_nix.gsub!('RUBY', options[:ruby])
    shell_nix.gsub!('LOCKFILE', "./#{Pathname(options[:lockfile]).relative_path_from(Pathname('./'))}")
    shell_nix.gsub!('GEMSET', "./#{Pathname(options[:gemset]).relative_path_from(Pathname('./'))}")
    File.write('shell.nix', shell_nix)
  end
end

gemset = Bundix.new(options).convert

tempfile = Tempfile.new('gemset.nix', encoding: 'UTF-8')
begin
  Bundix.object2nix(gemset, 2, tempfile)
  tempfile.flush
  FileUtils.cp(tempfile.path, options[:gemset])
ensure
  tempfile.close!
  tempfile.unlink
end
