# Various Notes

* https://rubygems.org/gems/rubygems-bundler
* http://guides.rubygems.org/command-reference/
* To get the specification in YAML:
    gem specification thor-0.19.1.gem files
* Bundler creates binstubs like so:
    require 'pathname'
    ENV['BUNDLE_GEMFILE'] ||= File.expand_path("../../Gemfile",
      Pathname.new(__FILE__).realpath)

    require 'rubygems'
    require 'bundler/setup'

    load Gem.bin_path('bundler', 'bundler')

# Plan

Use bundler to install all Ruby packges.
Patch rubygems to:
 - allow for running post-unpack commands
 - always apply bundler-binstub-like modifications (use $NIX_GEMFILE).
Path bundler to purify source fetching.
Pass gem build flags through .bundle/config, maybe.
Put Gemfile{,.lock} into separate derivation output.
Give an option:
 - Pure PATH sources (rewrite paths to be in-store in $bundler/Gemfile.lock)
 - Impure PATH sources (expand paths to be out-of-store in
    $bundler/Gemfile.lock - will need to prevent Bundler from complaining)
The idea is that the user will set $BUNDLE_GEMFILE to point at $bundler/Gemfile,
  and set $GEM_HOME / $GEM_PATH to $out/${ruby.gemPath}.
  $BUNDLE_PATH sets Bundler::Settings#path, and thus Bundler.path -
  might also need to be set to $out/${ruby.gemPath} (and, maybe, I can leave $GEM_HOME untouched that way).
TODO: what about vendored gems? (e.g. vendor/cache)
